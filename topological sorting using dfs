#include <iostream>
#include <vector>
#include <stack>

using namespace std;

class Graph {
private:
    int V; // Number of vertices
    vector<vector<int>> adj; // Adjacency list

    void topologicalSortDFS(int v, vector<bool>& visited, stack<int>& result) {
        visited[v] = true;

        for (int u : adj[v]) {
            if (!visited[u]) {
                topologicalSortDFS(u, visited, result);
            }
        }

        result.push(v);
    }

public:
    Graph(int vertices) : V(vertices) {
        adj.resize(V);
    }

    void addEdge(int u, int v) {
        adj[u].push_back(v);
    }

    vector<int> topologicalSort() {
        vector<bool> visited(V, false);
        stack<int> result;

        for (int i = 0; i < V; ++i) {
            if (!visited[i]) {
                topologicalSortDFS(i, visited, result);
            }
        }

        vector<int> sortedOrder;
        while (!result.empty()) {
            sortedOrder.push_back(result.top());
            result.pop();
        }

        return sortedOrder;
    }
};

int main() {
    Graph g(6); // Create a graph with 6 vertices

    // Add directed edges
    g.addEdge(5, 2);
    g.addEdge(5, 0);
    g.addEdge(4, 0);
    g.addEdge(4, 1);
    g.addEdge(2, 3);
    g.addEdge(3, 1);

    vector<int> result = g.topologicalSort();

    if (result.empty()) {
        cout << "The graph contains a cycle." << endl;
    } else {
        cout << "Topological Sorting Order: ";
        for (int vertex : result) {
            cout << vertex << " ";
        }
        cout << endl;
    }

    return 0;
}
